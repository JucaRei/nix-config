{ lib
, config
, pkgs
, ...
}:
with lib;
with lib.excalibur; let
  cfg = config.excalibur.services.k0s;
  inherit (pkgs.excalibur) k0s;
  subcommand =
    if (cfg.role == "worker")
    then "worker"
    else "controller";
  unitName = "k0s" + subcommand;
  configFile =
    if cfg.configText != ""
    then pkgs.writeText "k0s.yaml" cfg.configText
    else
      pkgs.writeText "k0s.yaml" ''
        # Generated by the k0s module
        apiVersion: k0s.k0sproject.io/v1beta1
        kind: Cluster
        metadata:
          name: ${cfg.clusterName}
        spec:
          api:
            address: ${cfg.apiAddress}
            k0sApiPort: 9443
            port: 6443
            sans:
        ${
          concatLines (forEach cfg.apiSans (value: "      - ${value}"))
        }      - 127.0.0.1
          extensions:
            storage:
              create_default_storage_class: true
              type: openebs_local_storage
          installConfig:
            users:
              etcdUser: ${cfg.users.etcdUser}
              kineUser: ${cfg.users.kineUser}
              konnectivityUser: ${cfg.users.konnectivityUser}
              kubeAPIserverUser: ${cfg.users.kubeAPIserverUser}
              kubeSchedulerUser: ${cfg.users.kubeSchedulerUser}
          konnectivity:
            adminPort: 8133
            agentPort: 8132
          network:
            kubeProxy:
              mode: iptables
            kuberouter:
              autoMTU: true
              mtu: 0
              peerRouterASNs: ""
              peerRouterIPs: ""
            podCIDR: 10.244.0.0/16
            provider: kuberouter
            serviceCIDR: 10.96.0.0/12
          podSecurityPolicy:
            defaultPolicy: 00-k0s-privileged
          storage:
            type: etcd
          telemetry:
            enabled: true
      '';
in
{
  options.excalibur.services.k0s = {
    enable =
      mkEnableOption (lib.mdDoc "Enable the k0s Kubernetes distribution.");

    package = mkPackageOption pkgs "k0s" { };

    role = mkOption {
      type = types.enum [ "controller" "controller+worker" "worker" "single" ];
      default = "single";
      description = ''
        The role of the node.
      '';
    };

    apiAddress = mkOption {
      # No default, has to be provided
      type = types.str;
      description = ''
        Required. Local address on which to bind an API.
      '';
    };

    apiSans = mkOption {
      type = types.listOf types.str;
      description = ''
        Required. List of additional addresses to push to API servers serving the certificate.
      '';
    };

    clusterName = mkOption {
      type = types.str;
      default = "k0s";
      description = ''
        The name of the cluster.
      '';
    };

    isLeader = mkOption {
      type = types.bool;
      default = false;
      description = ''
        The leader is used to generate the join tokens.
      '';
    };

    dataDir = mkOption {
      type = types.path;
      default = "/var/lib/k0s";
    };

    tokenFile = mkOption {
      type = types.path;
      default = "/tmp/detsys-vault/k0s-token";
    };

    configText = mkOption {
      default = "";
      type = types.str;
      description = ''
        The configuration file in YAML format.
        A default will be generated if unset.
      '';
    };

    users = {
      etcdUser = mkOption {
        type = types.str;
        default = "etcd";
      };
      kineUser = mkOption {
        type = types.str;
        default = "kube-apiserver";
      };
      konnectivityUser = mkOption {
        type = types.str;
        default = "konnectivity-server";
      };
      kubeAPIserverUser = mkOption {
        type = types.str;
        default = "kube-apiserver";
      };
      kubeSchedulerUser = mkOption {
        type = types.str;
        default = "kube-scheduler";
      };
    };

    role-id =
      mkOpt types.str
        config.excalibur.services.vault-agent.settings.vault.role-id
        "Absolute path to the Vault role-id";
    secret-id =
      mkOpt types.str
        config.excalibur.services.vault-agent.settings.vault.secret-id
        "Absolute path to the Vault secret-id";
    vault-path =
      mkOpt types.str "secret/excalibur/k0s"
        "The Vault path to the KV containing the k0s secrets.";
    vault-address = mkOption {
      type = types.str;
      default = config.excalibur.services.vault-agent.settings.vault.address;
      description = "The address of your Vault";
    };
    kvVersion = mkOption {
      type = types.enum [ "v1" "v2" ];
      default = "v2";
      description = "KV store version";
    };
  };
  config = mkIf cfg.enable {
    # environment.systemPackages = with pkgs; [
    #   openiscsi
    #   cni-plugins
    #   cni-plugin-flannel
    #   calico-cni-plugin
    #   nfs-utils
    # ];

    environment.etc."k0s/k0s.yaml".source = configFile;

    systemd.services.${unitName} = {
      description = "k0s - Zero Friction Kubernetes";
      documentation = [ "https://docs.k0sproject.io" ];
      path = with pkgs; [ kmod util-linux mount ];
      after = [ "network-online.target" ];
      wants = [ "network-online.target" ];
      wantedBy = [ "multi-user.target" ];
      startLimitIntervalSec = 5;
      startLimitBurst = 10;
      serviceConfig = {
        RestartSec = 120;
        Delegate = "yes";
        KillMode = "process";
        LimitCORE = "infinity";
        TasksMax = "infinity";
        TimeoutStartSec = 0;
        LimitNOFILE = 999999;
        Restart = "always";
        ExecStart =
          "${cfg.package}/bin/k0s ${subcommand} --data-dir=${cfg.dataDir}"
          + optionalString (cfg.role != "worker") " --config=${configFile}"
          + optionalString (cfg.role == "single") " --single"
          + optionalString (cfg.role == "controller+worker") " --enable-worker"
          + optionalString (cfg.role != "single" && !cfg.isLeader)
            " --token-file=${cfg.tokenFile}";
        Environment = "PATH=${pkgs.openiscsi}/bin:/run/wrappers/bin:$PATH";
      };
    };

    users.users =
      concatMapAttrs
        (_name: value: {
          ${value} = {
            isSystemUser = true;
            group = "users";
            home = "${cfg.dataDir}";
          };
        })
        cfg.users;
    excalibur.services.vault-agent.services.${unitName} = mkIf (cfg.role != "single" && !cfg.isLeader) {
      settings = {
        vault.address = cfg.vault-address;
        auto_auth = {
          method = [
            {
              type = "approle";
              config = {
                role_id_file_path = cfg.role-id;
                secret_id_file_path = cfg.secret-id;
                remove_secret_id_file_after_reading = false;
              };
            }
          ];
        };
      };
      secrets = {
        file = {
          files = {
            "k0s-token" = {
              text = ''
                {{ with secret "${cfg.vault-path}" }}{{ if eq "${cfg.kvVersion}" "v1" }}{{ .Data.${cfg.role} }}{{ else }}{{ .Data.data.${cfg.role} }}{{ end }}{{ end }}'';
              permissions = "0600"; # Make the script executable
              change-action = "restart";
            };
          };
        };
      };
    };
  };
}
# Largely adapted from https://github.com/johbo/k0s-nix/tree/main

