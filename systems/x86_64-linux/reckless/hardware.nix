# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }: {
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];

  boot.initrd.availableKernelModules =
    [ "nvme" "ahci" "xhci_pci" "usbhid" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" = {
    device = "NIXROOT/root";
    fsType = "zfs";
  };

  fileSystems."/home" = {
    device = "NIXROOT/home";
    fsType = "zfs";
  };

  fileSystems."/persist" = {
    device = "NIXROOT/persist";
    fsType = "zfs";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/8BE0-C3B9";
    fsType = "vfat";
  };

  fileSystems."/mnt/backups/webb" = {
    device = "ChestyPoolr/backups/webb";
    fsType = "zfs";
  };

  fileSystems."/mnt/backups/daly" = {
    device = "ChestyPoolr/backups/daly";
    fsType = "zfs";
  };

  fileSystems."/mnt/backups/butler" = {
    device = "ChestyPoolr/backups/butler";
    fsType = "zfs";
  };

  fileSystems."/mnt/backups/lucas" = {
    device = "ChestyPoolr/backups/lucas";
    fsType = "zfs";
  };

  fileSystems."/export/media" = {
    device = "ChestyPoolr/media";
    fsType = "zfs";
  };

  fileSystems."/export/audiobooks" = {
    device = "ChestyPoolr/media/audiobooks";
    fsType = "zfs";
  };

  fileSystems."/export/media/movies" = {
    device = "ChestyPoolr/media/movies";
    fsType = "zfs";
  };

  fileSystems."/export/media/tv-shows" = {
    device = "ChestyPoolr/media/tv-shows";
    fsType = "zfs";
  };

  fileSystems."/export/media/music" = {
    device = "ChestyPoolr/media/music";
    fsType = "zfs";
  };

  fileSystems."/var/lib/atticd" = {
    device = "MotorPool/attic";
    fsType = "zfs";
  };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp9s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode =
    lib.mkDefault config.hardware.enableRedistributableFirmware;

  networking.firewall.allowedTCPPorts = [ 2049 20048 ];
  networking.firewall.allowedUDPPorts = [ 2049 20048 ];
  services.nfs.server.enable = true;
  services.nfs.server.exports = ''
    /export/media 10.8.0.1/24(rw,nohide,insecure,no_subtree_check) 172.16.10.190(rw,nohide,insecure,no_subtree_check)
    /export/media/movies 10.8.0.1/24(rw,nohide,insecure,no_subtree_check) 172.16.10.190(rw,nohide,insecure,no_subtree_check)
    /export/media/tv-shows 10.8.0.1/24(rw,nohide,insecure,no_subtree_check) 172.16.10.190(rw,nohide,insecure,no_subtree_check)
    /export/media/audiobooks 10.8.0.1/24(rw,nohide,insecure,no_subtree_check) 172.16.10.190(rw,nohide,insecure,no_subtree_check)
    /export/media/music 10.8.0.1/24(rw,nohide,insecure,no_subtree_check) 172.16.10.190(rw,nohide,insecure,no_subtree_check)
  '';
}
